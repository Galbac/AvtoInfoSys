import json
import os
import yaml
from aiogram import Bot, Dispatcher
from aiogram import F
from aiogram import Router
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.client.bot import DefaultBotProperties
from dotenv import load_dotenv
from pathlib import Path

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ DefaultBotProperties –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

RECIPIENTS_FILE = "users.json"


def load_config():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞.
    –ò—â–µ—Ç —Å–Ω–∞—á–∞–ª–∞ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ—Ç–æ–º –≤ –ø–∞–ø–∫–µ ./config.
    """
    base_dir = Path(__file__).resolve().parent.parent  # –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    possible_paths = [
        base_dir / "config.yaml",
        base_dir / "config" / "config.yaml"
    ]

    for config_path in possible_paths:
        if config_path.exists():
            try:
                with config_path.open("r", encoding="utf-8") as f:
                    return yaml.safe_load(f)
            except yaml.YAMLError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ YAML: {e}")
                return {}

    print("‚ùå –û—à–∏–±–∫–∞: config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return {}


def load_recipients():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(RECIPIENTS_FILE):
        return []
    try:
        with open(RECIPIENTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}")
        return []


def save_recipient(user_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ."""
    recipients = load_recipients()
    if user_id not in recipients:
        recipients.append(user_id)
        try:
            with open(RECIPIENTS_FILE, "w", encoding="utf-8") as f:
                json.dump(recipients, f, ensure_ascii=False, indent=2)
        except IOError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {e}")


@router.message(F.text == "/start")
async def handle_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start."""
    save_recipient(message.chat.id)
    await message.answer("‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –æ—Ç—á—ë—Ç–æ–≤.")


@router.message()
async def handle_any(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    save_recipient(message.chat.id)
    await message.answer("üì• –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á—ë—Ç—ã.")


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
