# app/sync_core.py

from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import Dict, List, Tuple

from app.logger import get_logger
from app.config_loader import load_config
from app.reporter import save_html_report
from app.telegram_notify import send_report_file_to_telegram
from app.smb_utils import sync_folder

logger = get_logger()


def sync_one_folder(
    name: str,
    network_path: str,
    destination_root: str,
    dry_run: bool
) -> Tuple[str, List[Dict], Dict[str, int]]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –æ–¥–Ω—É —Å–µ—Ç–µ–≤—É—é –ø–∞–ø–∫—É.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - –∏–º—è –ø–∞–ø–∫–∏
        - —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
        - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
    """
    logger.info(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É: {name}")
    try:
        result, stats = sync_folder(name, network_path, destination_root, dry_run)
        return name, result, stats
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {name}")
        return name, [], {"added": 0, "modified": 0, "copied": 0}


def start_sync(config_path: str = "config.yaml", dry_run: bool = False) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ñ–∏–≥–µ –ø–∞–ø–æ–∫.
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")

    config = load_config(config_path)
    destination_root = config.get("destination_root")
    shared_folders = config.get("shared_folders")

    if not destination_root or not shared_folders:
        logger.error("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'destination_root' –∏–ª–∏ 'shared_folders'")
        return

    all_results: Dict[str, List[Dict]] = {}
    all_stats: Dict[str, Dict[str, int]] = {}

    with ThreadPoolExecutor() as executor:
        futures = {
            executor.submit(sync_one_folder, name, path, destination_root, dry_run): name
            for name, path in shared_folders.items()
        }

        for future in as_completed(futures):
            try:
                name, result, stats = future.result()
                all_results[name] = result
                all_stats[name] = stats
            except Exception as e:
                name = futures[future]
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–ø–∫–∏ {name}")

    report_path = save_html_report(all_results, all_stats, dry_run)

    try:
        send_report_file_to_telegram(report_path)
        logger.info("üì§ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    except Exception as e:
        logger.exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Telegram")

    logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
