from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime
from typing import Dict, List, Tuple

from app.logger import get_logger
from app.config_loader import load_config
from app.reporter import save_html_report
from app.telegram_notify import send_report_file_to_telegram
from app.smb_utils import sync_folder

logger = get_logger()


def sync_one_folder(
    name: str,
    network_path: str,
    destination_paths: list[str],
    report_path_root: str,
    dry_run: bool
) -> Tuple[str, List[str], Dict[str, int]]:
    logger.info(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É: {name}")
    try:
        result, stats = sync_folder(name, network_path, destination_paths, report_path_root, dry_run)
        return name, result, stats
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {name}: {e}")
        return name, [], {"added": 0, "modified": 0, "copied": 0}



def start_sync(config_path: str = "config.yaml", dry_run: bool = False) -> None:
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")

    config = load_config(config_path)
    destination = config.get("destination", {})
    destination_paths = destination.get("paths")
    sources = config.get("sources", [])

    if not destination_paths or not sources:
        logger.error("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'destination.paths' –∏–ª–∏ —Å–ø–∏—Å–æ–∫ 'sources'")
        return

    all_results: Dict[str, List[str]] = {}
    all_stats: Dict[str, Dict[str, int]] = {}

    with ThreadPoolExecutor() as executor:
        futures = []

        for src in sources:
            for dest_path in destination_paths:
                futures.append(
                    executor.submit(sync_one_folder, src["name"], src["path"], dest_path, dry_run)
                )

        for future in as_completed(futures):
            try:
                folder_name, result, stats = future.result()

                # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏
                if folder_name not in all_results:
                    all_results[folder_name] = []
                    all_stats[folder_name] = {"added": 0, "modified": 0, "copied": 0}

                all_results[folder_name].extend(result)
                for k in stats:
                    all_stats[folder_name][k] += stats[k]
            except Exception as e:
                logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: %s", e)

    report_datetime = datetime.now()
    report_path = save_html_report(all_results, all_stats, report_datetime)

    try:
        send_report_file_to_telegram(report_path)
        logger.info("üì§ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    except Exception as e:
        logger.exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Telegram: {e}")

    logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

