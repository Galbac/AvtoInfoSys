# app/sync_core.py
from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime
import time
import threading
from pathlib import Path
from typing import Dict, List, Tuple, Set
from app.logger import get_logger
from app.config_loader import load_config
from app.reporter import save_html_report

logger = get_logger()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
_successful_sources: Set[str] = set()
_sync_results: Dict[str, List[Tuple[str, str, Dict]]] = {}
_sync_stats: Dict[str, Dict[str, int]] = {}
_dest_paths: List[str] = []
_report_root: str = ""
_dry_run: bool = False
_lock = threading.Lock()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã–º –ø–æ—Ç–æ–∫–æ–º
_monitor_active = False
_monitor_thread: threading.Thread | None = None


def can_ping(host: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ ping."""
    import subprocess
    try:
        result = subprocess.run(
            ["ping", "-n", "1", "-w", "1000", host],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
        return result.returncode == 0
    except Exception:
        return False


def is_source_accessible(path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ping + exists."""
    try:
        if path.startswith("\\\\"):
            parts = path.split("\\")
            if len(parts) > 2:
                host = parts[2]
                if not can_ping(host):
                    return False
            else:
                return False
        return Path(path).exists()
    except Exception:
        return False


def sync_one_folder_wrapper(source: dict) -> Tuple[str, List[Tuple[str, str, Dict]], Dict[str, int]]:
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –ø–æ—Ç–æ–∫–µ."""
    name = source["name"]
    path = source["path"]
    logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å: {name} ({path})")
    try:
        from app.smb_utils import sync_folder
        result, stats = sync_folder(name, path, _dest_paths, _report_root, _dry_run)
        return name, result, stats
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {name}: {e}")
        return name, [], {"added": 0, "modified": 0, "copied": 0}


def prepare_results_by_bureau(
    all_results: Dict[str, List[Tuple[str, str, Dict]]],
    all_stats: Dict[str, Dict[str, int]],
    sources: List[dict]
) -> Tuple[Dict, Dict]:
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –±—é—Ä–æ."""
    results_by_bureau = {}
    stats_by_bureau = {}
    for source in sources:
        name = source["name"]
        buro = source.get("buro", "–ë–µ–∑ –±—é—Ä–æ")
        results_by_bureau.setdefault(buro, {})[name] = all_results.get(name, [])
        stats_by_bureau.setdefault(buro, {})[name] = all_stats.get(name, {
            "added": 0, "modified": 0, "copied": 0
        })
    return results_by_bureau, stats_by_bureau


def background_monitor(sources: List[dict], interval: float = 2.0) -> None:
    """
    üîÅ –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ö–ê–ñ–î–´–ï 2 –°–ï–ö–£–ù–î–´.
    –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç.
    –†–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π.
    """
    global _successful_sources, _monitor_active, _sync_results, _sync_stats
    logger.info(f"üîÅ –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {interval:.1f} —Å–µ–∫—É–Ω–¥...")

    while _monitor_active:
        time.sleep(interval)
        if not _monitor_active:
            break

        candidates = []
        with _lock:
            for src in sources:
                if src["name"] not in _successful_sources and is_source_accessible(src["path"]):
                    candidates.append(src)

        if not candidates:
            continue

        logger.info(f"üîÅ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –Ω–∞–π–¥–µ–Ω–æ {len(candidates)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        max_workers = min(5, len(candidates))
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            futures = {
                executor.submit(sync_one_folder_wrapper, src): src["name"]
                for src in candidates
            }
            for future in as_completed(futures):
                name = futures[future]
                try:
                    folder_name, result, stats = future.result()
                    with _lock:
                        _sync_results[folder_name] = result
                        _sync_stats[folder_name] = stats
                        _successful_sources.add(folder_name)
                    logger.info(f"‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {folder_name}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–µ {name}: {e}")

    logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


def start_sync(config_path: str = "config.yaml", dry_run: bool = False) -> None:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
    - –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –°–†–ê–ó–£
    - –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    - –§–æ–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    - –û—Ç—á—ë—Ç ‚Äî –≤ –∫–æ–Ω—Ü–µ
    """
    global _successful_sources, _sync_results, _sync_stats
    global _dest_paths, _report_root, _dry_run, _monitor_active, _monitor_thread

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    _successful_sources = set()
    _sync_results = {}
    _sync_stats = {}
    _dry_run = dry_run
    _monitor_active = False
    _monitor_thread = None

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    start_time = time.time()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
    config = load_config(config_path)
    if not config:
        logger.error("‚ùå –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –æ—Ç—á—ë—Ç")
        sources = []
    else:
        sources = config.get("sources", [])
        if not sources:
            logger.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—É—Å—Ç")
        else:
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}")

    # –ü—É—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    destination = config.get("destination", {}) if config else {}
    dest_paths = destination.get("paths", [])
    if isinstance(dest_paths, str):
        dest_paths = [dest_paths]
    _dest_paths = dest_paths
    _report_root = dest_paths[0] if dest_paths else ""

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    accessible_sources = []
    delayed_sources = []

    for src in sources:
        if is_source_accessible(src["path"]):
            accessible_sources.append(src)
        else:
            logger.warning(f"‚è∏Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {src['name']} ‚Üí {src['path']}")
            delayed_sources.append(src)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –î–û –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    expected_total = len(sources)
    if delayed_sources:
        _monitor_active = True
        _monitor_thread = threading.Thread(
            target=background_monitor,
            args=(sources, 2.0),
            daemon=True
        )
        _monitor_thread.start()
        logger.info(f"üîÅ –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω: –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã. –û–∂–∏–¥–∞–µ–º {len(delayed_sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
    else:
        logger.info("‚úÖ –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã. –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω—É–∂–µ–Ω.")

    # 2. –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    if accessible_sources:
        max_workers = min(20, len(accessible_sources))
        logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º {len(accessible_sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            futures = {
                executor.submit(sync_one_folder_wrapper, src): src["name"]
                for src in accessible_sources
            }
            for future in as_completed(futures):
                name = futures[future]
                try:
                    folder_name, result, stats = future.result()
                    _sync_results[folder_name] = result
                    _sync_stats[folder_name] = stats
                    _successful_sources.add(folder_name)
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {folder_name}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ {name}: {e}")
    else:
        logger.info("‚úÖ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.")

    # 3. –£–º–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ: –∂–¥—ë–º, –ø–æ–∫–∞ —Ñ–æ–Ω –Ω–∞–π–¥—ë—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è, –Ω–æ –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    elapsed = time.time() - start_time
    wait_time = max(60.0 - elapsed, 5.0)  # –º–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
    check_interval = 0.5
    checks_without_progress = 0
    last_count = len(_successful_sources)

    logger.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {wait_time:.1f} —Å–µ–∫...")

    # –ñ–¥—ë–º, –Ω–æ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    for _ in range(int(wait_time / check_interval)):
        time.sleep(check_interval)
        current_count = len(_successful_sources)
        if current_count > last_count:
            checks_without_progress = 0  # –±—ã–ª –ø—Ä–æ–≥—Ä–µ—Å—Å
            last_count = current_count
            logger.debug(f"üü¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {_successful_sources}")
        else:
            checks_without_progress += 1

        # –ï—Å–ª–∏ —É–∂–µ –≤—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if current_count >= expected_total:
            logger.info("‚úÖ –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
            break

        # –ï—Å–ª–∏ 10 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ‚Äî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
        if checks_without_progress >= (10.0 / check_interval):
            logger.warning(f"üõë –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ: –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –±–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥. –£—Å–ø–µ—à–Ω–æ: {current_count}/{expected_total}")
            break
    else:
        logger.info(f"‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω–æ. –£—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(_successful_sources)}/{expected_total}")

    # 4. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    if _monitor_active:
        _monitor_active = False
        if _monitor_thread and _monitor_thread.is_alive():
            _monitor_thread.join(timeout=2)
        logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")

    # 5. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
    results_by_bureau, stats_by_bureau = prepare_results_by_bureau(_sync_results, _sync_stats, sources)
    try:
        report_path = save_html_report(results_by_bureau, stats_by_bureau, datetime.now())
        logger.info(f"üìÑ –û–¢–ß–Å–¢ –°–§–û–†–ú–ò–†–û–í–ê–ù: {report_path}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
        logger.exception(e)

    logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")