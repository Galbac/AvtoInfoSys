# app/sync_core.py
from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime
from pathlib import Path
from threading import Thread
from typing import Dict, List, Tuple
from app.logger import get_logger
from app.config_loader import load_config
from app.reporter import save_html_report

logger = get_logger()

def can_ping(host: str) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ –∏–º–µ–Ω–∏ (—á–µ—Ä–µ–∑ ping)."""
    import subprocess
    try:
        result = subprocess.run(
            ["ping", "-n", "1", "-w", "1000", host],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
        return result.returncode == 0
    except:
        return False

def is_source_accessible(path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–µ–≤–æ–≥–æ –ø—É—Ç–∏: —Å–Ω–∞—á–∞–ª–∞ ping, –ø–æ—Ç–æ–º exists."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ö–æ—Å—Ç–∞ –∏–∑ –ø—É—Ç–∏ \\host\share
        if path.startswith("\\\\"):
            host = path.split("\\")[2]
            if not can_ping(host):
                return False
        p = Path(path)
        return p.exists()
    except Exception:
        return False

def save_state_async(data: Dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–æ–Ω–µ."""
    def _save():
        from app.database import save_state
        save_state(data)
    Thread(target=_save, daemon=True).start()

def sync_one_folder_wrapper(
    source: Dict,
    destination_paths: List[str],
    report_path_root: str,
    dry_run: bool
) -> Tuple[str, List[Tuple[str, str, Dict]], Dict[str, int]]:
    name = source["name"]
    network_path = source["path"]
    logger.info(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É: {name} ({network_path})")
    try:
        from app.smb_utils import sync_folder
        result, stats = sync_folder(name, network_path, destination_paths, report_path_root, dry_run)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –≤ —Ñ–æ–Ω–µ
        from app.database import load_state
        db = load_state()
        Thread(target=lambda: save_state_async(db), daemon=True).start()
        return name, result, stats
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {name}: {e}")
        return name, [], {"added": 0, "modified": 0, "copied": 0}

def prepare_results_by_bureau(
    all_results: Dict[str, List[Tuple[str, str, Dict]]],
    all_stats: Dict[str, Dict[str, int]],
    sources: List[Dict]
) -> Tuple[Dict[str, Dict[str, List[Tuple[str, str, Dict]]]], Dict[str, Dict[str, Dict[str, int]]]]:
    results_by_bureau = {}
    stats_by_bureau = {}
    for source in sources:
        name = source.get("name")
        bureau = source.get("buro", "–ë–µ–∑ –±—é—Ä–æ")
        if bureau not in results_by_bureau:
            results_by_bureau[bureau] = {}
        results_by_bureau[bureau][name] = all_results.get(name, [])
        if bureau not in stats_by_bureau:
            stats_by_bureau[bureau] = {}
        stats_by_bureau[bureau][name] = all_stats.get(name, {"added": 0, "modified": 0, "copied": 0})
    return results_by_bureau, stats_by_bureau

def start_sync(config_path: str = "config.yaml", dry_run: bool = False) -> None:
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    config = load_config(config_path)
    destination = config.get("destination", {})
    destination_paths = destination.get("paths", [])
    if isinstance(destination_paths, str):
        destination_paths = [destination_paths]
    report_path_root = destination_paths[0] if destination_paths else None
    sources = config.get("sources", [])
    if not destination_paths or not sources:
        logger.error("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è")
        return

    accessible_sources = []
    delayed_sources = []

    for src in sources:
        if is_source_accessible(src["path"]):
            accessible_sources.append(src)
        else:
            logger.warning(f"‚è∏Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—Ç–ª–æ–∂–µ–Ω): {src['name']}")
            delayed_sources.append(src)

    all_results: Dict[str, List[Tuple[str, str, Dict]]] = {}
    all_stats: Dict[str, Dict[str, int]] = {}

    max_workers = min(20, len(accessible_sources) or 1)
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = {
            executor.submit(
                sync_one_folder_wrapper, src, destination_paths, report_path_root, dry_run
            ): src["name"]
            for src in accessible_sources
        }
        for future in as_completed(futures):
            name = futures[future]
            try:
                folder_name, result, stats = future.result()
                all_results[folder_name] = result
                all_stats[folder_name] = stats
                logger.info(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {folder_name}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ {name}: {e}")

    if delayed_sources:
        logger.info(f"üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è {len(delayed_sources)} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö...")
        retry_sources = [src for src in delayed_sources if is_source_accessible(src["path"])]
        with ThreadPoolExecutor(max_workers=min(20, len(retry_sources) or 1)) as executor:
            futures = {
                executor.submit(
                    sync_one_folder_wrapper, src, destination_paths, report_path_root, dry_run
                ): src["name"]
                for src in retry_sources
            }
            for future in as_completed(futures):
                name = futures[future]
                try:
                    folder_name, result, stats = future.result()
                    all_results[folder_name] = result
                    all_stats[folder_name] = stats
                    logger.info(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {folder_name}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ {name}: {e}")

        failed = [src["name"] for src in delayed_sources if src not in retry_sources]
        if failed:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫: {', '.join(failed)}")

    results_by_bureau, stats_by_bureau = prepare_results_by_bureau(all_results, all_stats, sources)
    report_datetime = datetime.now()
    report_path = save_html_report(results_by_bureau, stats_by_bureau, report_datetime)
    logger.info(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
    logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–¥–∞–∂–µ –ø—Ä–∏ —á–∞—Å—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö)")