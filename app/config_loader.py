#app/config_loader.py
from pathlib import Path
from typing import Any, Dict
import yaml
from app.logger import get_logger

logger = get_logger()

class ConfigError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    pass

def load_config(config_path: str = "") -> dict:
    """
    üîπ –ó–∞–≥—Ä—É–∂–∞–µ—Ç YAML-–∫–æ–Ω—Ñ–∏–≥.
    - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å ‚Üí config.yaml ‚Üí config/config.yaml
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç `destination.path` ‚Üí `destination.paths`
    - –ó–∞—â–∏—Ç–∞ –æ—Ç –±–∏—Ç—ã—Ö/–ø—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
    """
    from app.utils import CONFIG_PATHS
    search_paths = [Path(config_path)] if config_path else CONFIG_PATHS

    for path in search_paths:
        if not path.exists():
            continue
        try:
            with path.open("r", encoding="utf-8") as f:
                content = f.read().strip()
                if not content:
                    logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª –ø—É—Å—Ç: {path}")
                    return {}
                config = yaml.safe_load(content)
            if not isinstance(config, dict):
                logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç YAML: {path}")
                return {}

            # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –æ–¥–∏–Ω –ø—É—Ç—å ‚Üí —Å–ø–∏—Å–æ–∫
            dest = config.get("destination")
            if isinstance(dest, dict):
                if "path" in dest and "paths" not in dest:
                    dest["paths"] = [dest.pop("path")]  # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                if isinstance(dest.get("paths"), str):
                    dest["paths"] = [dest["paths"]]

            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω: {path}")
            return config
        except yaml.YAMLError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML {path}: {e}")
            return {}
        except PermissionError:
            logger.error(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: {path}")
            return {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞ {path}: {e}")
            return {}

    logger.error("‚ùå –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É—Ç—è—Ö.")
    return {}

def validate_config(config: Dict[str, Any]) -> None:
    """
    üîπ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥–∞.
    –í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç ConfigError –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.
    """
    sources = config.get("sources")
    if not isinstance(sources, list) or not sources:
        raise ConfigError("‚ùå 'sources' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º.")

    for idx, source in enumerate(sources, 1):
        if not isinstance(source, dict):
            raise ConfigError(f"‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ #{idx} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—ë–º.")
        if not source.get("name"):
            raise ConfigError(f"‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ #{idx} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'name'.")
        if not source.get("path"):
            raise ConfigError(f"‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ #{idx} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'path'.")
        if not isinstance(source.get("buro", ""), str):
            raise ConfigError(f"‚ùå 'buro' —É –∏—Å—Ç–æ—á–Ω–∏–∫–∞ #{idx} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π.")
        if not isinstance(source.get("mounted", True), bool):
            raise ConfigError(f"‚ùå 'mounted' —É –∏—Å—Ç–æ—á–Ω–∏–∫–∞ #{idx} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å bool.")

    destination = config.get("destination")
    if not isinstance(destination, dict):
        raise ConfigError("‚ùå 'destination' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—ë–º.")
    if not destination.get("paths") or not isinstance(destination["paths"], list) or not destination["paths"]:
        raise ConfigError("‚ùå –£–∫–∞–∂–∏—Ç–µ 'destination.paths' –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π.")

    for path in destination["paths"]:
        if not isinstance(path, str) or not path.strip():
            raise ConfigError(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –≤ 'destination.paths': {path}")

    logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω.")