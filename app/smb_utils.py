# app/smb_utils.py
import os
from pathlib import Path
from shutil import copy2
from typing import List, Tuple, Dict
from tqdm import tqdm
from app.database import load_state, save_state
from app.hashing import calculate_hash, get_file_info
from app.logger import get_logger

logger = get_logger()


def make_relative_key(source_root: Path, file_path: Path) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç os.path.relpath –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å UNC.
    """
    try:
        rel = os.path.relpath(str(file_path), str(source_root))
        return os.path.normpath(rel).replace("\\", "/").lower()
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è {file_path}: {e}")
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
        try:
            src_str = str(source_root).rstrip("\\/")
            file_str = str(file_path)
            if file_str.lower().startswith(src_str.lower()):
                rel = file_str[len(src_str):].lstrip("\\/")
                return rel.replace("\\", "/").lower()
        except:
            pass
        return "unknown/" + file_path.name


def list_files(path: Path) -> List[Path]:
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤."""
    if not path.exists():
        return []
    try:
        return [f for f in path.rglob("*") if f.is_file()]
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ {path}: {e}")
        return []


def sync_folder(
    name: str,
    source_path: str,
    dest_paths: List[str],
    report_path_root: str,
    dry_run: bool = False
) -> Tuple[List[Tuple[str, str, Dict]], Dict[str, int]]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ç–µ–≤—É—é –ø–∞–ø–∫—É —Å –ª–æ–∫–∞–ª—å–Ω–æ–π.
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ UNC-–ø—É—Ç–µ–π.
    """
    source = Path(source_path)
    logger.info(f"üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")

    if not source.exists():
        logger.warning(f"‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {source}")
        return [], {"added": 0, "modified": 0, "copied": 0}

    # üîπ –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    dest_dirs = []
    for p in dest_paths:
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–µ—à–∏, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        clean_p = str(Path(p.strip()))
        dest_dirs.append(Path(clean_p))

    # üîπ –ü—É—Ç—å –¥–ª—è –æ—Ç—á—ë—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
    if report_path_root:
        report_root = Path(report_path_root) / name
    else:
        report_root = None

    # üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à
    db = load_state()
    source_cache = db.get(name, {})

    stats = {"added": 0, "modified": 0, "copied": 0}
    changed_files: List[Tuple[str, str, Dict]] = []

    files = list_files(source)
    total_files = len(files)

    with tqdm(
        total=total_files,
        desc=f"üîÑ {name}",
        unit="—Ñ",
        ncols=100,
        leave=False,
        bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]"
    ) as pbar:
        for src_file in files:
            try:
                # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º os.path.relpath
                try:
                    rel_path_str = os.path.relpath(str(src_file), str(source))
                    relative_path = Path(rel_path_str)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è relpath failed for {src_file}: {e}")
                    pbar.update(1)
                    continue

                # üîπ –¶–µ–ª–µ–≤—ã–µ –ø—É—Ç–∏: –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï
                target_files = []
                for d in dest_dirs:
                    try:
                        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø—É—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
                        target = d / name / relative_path
                        target_files.append(target)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—É—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {d} / {name} / {relative_path} | {e}")
                        continue

                main_target = (report_root / relative_path) if report_root else target_files[0] if target_files else None
                if not main_target:
                    pbar.update(1)
                    continue

                src_info = get_file_info(src_file)
                if not src_info:
                    pbar.update(1)
                    continue
                src_mtime, src_size = src_info

                # üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –∫—ç—à–∞
                cache_key = make_relative_key(source, src_file)
                cached = source_cache.get(cache_key)

                # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ mtime –∏ size (—Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é 2 —Å–µ–∫)
                if (cached and
                    cached["size"] == src_size and
                    abs(cached["mtime"] - src_mtime) <= 2.0):
                    src_hash = cached["hash"]
                else:
                    src_hash = calculate_hash(src_file)
                    if not src_hash:
                        pbar.update(1)
                        continue

                # üîπ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                if name not in db:
                    db[name] = {}
                db[name][cache_key] = {
                    "hash": src_hash,
                    "mtime": src_mtime,
                    "size": src_size
                }

                # üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –∫–∞–∂–¥—ã–µ 50 —Ñ–∞–π–ª–æ–≤
                if len(db[name]) % 50 == 0:
                    save_state(db)

                # üîπ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
                if not main_target.exists():
                    if not dry_run:
                        for dest_file in target_files:
                            try:
                                # üîπ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞
                                dest_file.parent.mkdir(parents=True, exist_ok=True)
                                copy2(src_file, dest_file)
                            except PermissionError as e:
                                logger.error(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å: {dest_file} | {e}")
                            except Exception as e:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {src_file} ‚Üí {dest_file}: {e}")
                    stats["added"] += 1
                    stats["copied"] += 1
                    changed_files.append((str(relative_path), "added", {
                        "size": src_size,
                        "mtime": src_mtime
                    }))
                else:
                    old_info = get_file_info(main_target)
                    old_mtime, old_size = old_info if old_info else ("unknown", "unknown")
                    dest_hash = calculate_hash(main_target)
                    if dest_hash and src_hash != dest_hash:
                        if not dry_run:
                            for dest_file in target_files:
                                try:
                                    dest_file.parent.mkdir(parents=True, exist_ok=True)
                                    copy2(src_file, dest_file)
                                except PermissionError as e:
                                    logger.error(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å: {dest_file} | {e}")
                                except Exception as e:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {dest_file}: {e}")
                        stats["modified"] += 1
                        stats["copied"] += 1
                        changed_files.append((str(relative_path), "modified", {
                            "size": src_size,
                            "mtime": src_mtime,
                            "old_size": old_size,
                            "old_mtime": old_mtime
                        }))
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {src_file}: {e}")
            finally:
                pbar.update(1)

    # üîπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞: —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    current_files = {make_relative_key(source, f) for f in files}
    if name in db:
        stale_keys = [k for k in db[name].keys() if k not in current_files]
        for k in stale_keys:
            del db[name][k]
        if stale_keys:
            logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(stale_keys)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞ '{name}'")

    # üîπ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    save_state(db)
    logger.info(f"‚úÖ –ö—ç—à –¥–ª—è '{name}' –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    return changed_files, stats