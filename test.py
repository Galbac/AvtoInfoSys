try:
    with open(r"\\desktop-hshsuuu\–†–∞–±–æ—Ç–∞\–†–∞–∑–Ω–æ–µ\—Ç–µ—Å—Ç 2.txt", "r", encoding="utf-8") as f:
        print(f.read())
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")

from pathlib import Path

test_path = r"\\Abakarov_m\–†–ê–ë–û–¢–ê\–¶–ï–•-18\–ü—É–∞–Ω—Å–æ–Ω_1601_6319_5\02\–î–µ—Ç–∞–ª—å02.stc"
p = Path(test_path)

print(f"–ü—É—Ç—å: {p}")
print(f"–°—É—â–µ—Å—Ç–≤—É–µ—Ç: {p.exists()}")
print(f"–†–∞–∑–º–µ—Ä: {p.stat().st_size if p.exists() else '‚Äî'}")

try:
    with open(p, "rb") as f:
        print("–ü–µ—Ä–≤—ã–µ 10 –±–∞–π—Ç:", f.read(10))
except PermissionError as e:
    print("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞:", e)
except Exception as e:
    print("–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞:", e)

# migrate_json_to_sqlite.py
import json
import sqlite3
from pathlib import Path

# –ü—É—Ç–∏
JSON_FILE = Path("synced_db.json")
SQLITE_FILE = Path("synced_db.sqlite3")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
if not JSON_FILE.exists():
    print(f"‚ùå –§–∞–π–ª {JSON_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    exit(1)

# –ß–∏—Ç–∞–µ–º JSON
print(f"üîÑ –ß—Ç–µ–Ω–∏–µ {JSON_FILE}...")
try:
    with open(JSON_FILE, 'r', encoding='utf-8') as f:
        data = json.load(f)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
    exit(1)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite (—Å–æ–∑–¥–∞—Å—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ—Ç)
print(f"üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {SQLITE_FILE}...")
conn = sqlite3.connect(SQLITE_FILE)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
conn.execute("PRAGMA journal_mode = WAL")
conn.execute("PRAGMA synchronous = NORMAL")
conn.execute("PRAGMA cache_size = 10000")

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
conn.execute("""
    CREATE TABLE IF NOT EXISTS file_cache (
        source_name TEXT NOT NULL,
        file_key TEXT NOT NULL,
        hash TEXT,
        mtime REAL,
        size INTEGER,
        PRIMARY KEY (source_name, file_key)
    )
""")
conn.execute("CREATE INDEX IF NOT EXISTS idx_source ON file_cache(source_name)")
print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ file_cache –≥–æ—Ç–æ–≤–∞")

# –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
all_records = []
for source_name, files in data.items():
    for file_key, info in files.items():
        all_records.append((
            source_name,
            file_key,
            info.get("hash"),
            info.get("mtime"),
            info.get("size")
        ))

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ—Ö –∂–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
sources = list(data.keys())
if sources:
    placeholders = ",".join(["?" for _ in sources])
    conn.execute(f"DELETE FROM file_cache WHERE source_name IN ({placeholders})", sources)

# –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
conn.executemany("""
    INSERT INTO file_cache (source_name, file_key, hash, mtime, size)
    VALUES (?, ?, ?, ?, ?)
""", all_records)

conn.commit()
conn.close()

# –§–∏–Ω–∞–ª
size_mb = SQLITE_FILE.stat().st_size / (1024 * 1024)
print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(all_records)} –∑–∞–ø–∏—Å–µ–π")
print(f"üìä –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã: {size_mb:.2f} MB")
print(f"üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {JSON_FILE} ‚Üí {SQLITE_FILE}")
